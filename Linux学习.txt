#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/ipc.h>
#include <sys/sem.h>
#include <string.h>
#include <signal.h>

int sem_creat(key_t key){  //创建信号量
   return  semget(key,1,IPC_CREAT|0644);
}
union semun {
    int val;
};
void sem_setval(int semid,int val){//设置信号量
    union semun su;
    su.val = val;
    semctl(semid,0,SETVAL,su);
}

void P(int semid){ //P操作
    struct sembuf sb[1];
    sb[0].sem_num = 0;
    sb[0].sem_op  =-1;
    sb[0].sem_flg = 0;
    semop(semid,sb,1);
}

void V(int semid){ //V操作
    struct sembuf sb[1];
    sb[0].sem_num = 0;
    sb[0].sem_op  =1;
    sb[0].sem_flg = 0;
    semop(semid,sb,1);
}
void print_char(int semid,char c){
    int i;
    for(i = 0; i < 10;i++){
        P(semid);
        printf("%c",c);
        fflush(stdout);
        sleep(rand()%3);
        printf("%c",c);
        fflush(stdout);
        sleep(rand()%3);
        V(semid);
    }
}

void handler(int s){
    wait(NULL); //回收子进程
}
int main(void){

    struct sigaction act;
    act.sa_handler = handler;
    sigemptyset(&act.sa_mask);
    act.sa_flags = 0;
    sigaction(SIGCHLD,&act,NULL);

    srand(getpid());

    int semid = sem_creat(1234);
    sem_setval(semid,1);
    pid_t pid = fork();
    if(pid == 0){
        print_char(semid,'O');
    }else{
        print_char(semid,'X');
    }
}

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/ipc.h>
#include <sys/sem.h>
#include <sys/shm.h>

int creat_shm(key_t key,size_t size){
    return shmget(key,size,IPC_CREAT|0644);
}

int creat_sem(key_t key){
    return semget(key,1,IPC_CREAT|0644);
}
union semun{
    int val;
};
void sem_setval(int semid,int val){
    union semun su;
    su.val = val;
    semctl(semid,0,SETVAL,su);
}

void P(int semid){
    struct sembuf sb[1];
    sb[0].sem_num = 0;
    sb[0].sem_op = -1;
    sb[0].sem_flg = 0;
    semop(semid,sb,1);
}
void V(int semid){
    struct sembuf sb[1];
    sb[0].sem_num = 0;
    sb[0].sem_op = 1;
    sb[0].sem_flg = 0;
    semop(semid,sb,1);
}



int main(void){
    int shmid = creat_shm(1234,sizeof(int));
    int sem_write = creat_sem(1234);
    int sem_read = creat_sem(1235);
    //设置信号量
    sem_setval(sem_write,1);
    sem_setval(sem_read,0);
    int* p = shmat(shmid,NULL,0); //挂载在共享内存
    srand(getpid());
    int i = 0;
    while(1){
        P(sem_write);
        printf("开始生产....%d\n",i);
        sleep(rand()%3);
        *p = i++;
        printf("结束生产....%d\n",i-1);
        V(sem_read);
    }
}

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/ipc.h>
#include <sys/sem.h>
#include <sys/shm.h>

int open_shm(key_t key){
    return shmget(key,0,0);
}

int open_sem(key_t key){
    return semget(key,0,0);
}

void P(int semid){
    struct sembuf sb[1];
    sb[0].sem_num = 0;
    sb[0].sem_op = -1;
    sb[0].sem_flg = 0;
    semop(semid,sb,1);
}
void V(int semid){
    struct sembuf sb[1];
    sb[0].sem_num = 0;
    sb[0].sem_op = 1;
    sb[0].sem_flg = 0;
    semop(semid,sb,1);
}


int main(void){
    int shmid = open_shm(1234);
    int sem_write = open_sem(1234);
    int sem_read = open_sem(1235);
    int* p = shmat(shmid,NULL,0);
    srand(getpid());
    while(1){
        P(sem_read);
        printf("开始消费....%d\n",*p);
        sleep(rand()%3);
        printf("结束消费....%d\n",*p);
        V(sem_write);
    }
}
