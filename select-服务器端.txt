#include <stdio.h>
#include <stdlib.h>
#include <sys/select.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <string.h>

int tcp_init() {
int lfd = socket(AF_INET, SOCK_STREAM, 0);

int op = 1;
setsockopt(lfd, SOL_SOCKET, SO_REUSEADDR, &op, sizeof(op));

struct sockaddr_in addr;
addr.sin_family = AF_INET;
addr.sin_port = htons(9898);
addr.sin_addr.s_addr = htonl(INADDR_ANY);
int r = bind(lfd, (struct sockaddr*)&addr, sizeof(addr));
if ( r == -1 ) perror("bind"),exit(1);

listen(lfd, 10);

return lfd;
}
int main( void ) {
int lfd = tcp_init();
int clients[FD_SETSIZE];
fd_set rset, allset;
int maxfd, i;

for (i=0; i<FD_SETSIZE; i++)
clients[i] = -1;

FD_ZERO(&rset);
FD_ZERO(&allset);

FD_SET(lfd, &allset);
maxfd = lfd;
int maxi = -1;

for ( ; ; ) {
rset = allset;
int nready = select(maxfd+1, &rset, NULL, NULL, NULL);
if ( nready <= 0 ) continue;

if ( FD_ISSET(lfd, &rset) ) {
int cfd = accept(lfd, NULL, NULL);
for (i=0; i<FD_SETSIZE; i++) {
if ( clients[i] == -1 ) {
clients[i] = cfd;
maxfd = maxfd > cfd ? maxfd : cfd;
printf("i=%d, cfd=%d, maxfd=%d\n", i, cfd, maxfd);
break;
}
if ( i > maxi )
maxi = i;
}
if ( i == FD_SETSIZE ) {
printf("too many client\n");
exit(0);
}
FD_SET(cfd, &allset);
if ( --nready <= 0 )
continue;
}

for ( i=0; i<=maxi; i++) {
int fd = clients[i];
if ( fd == -1 ) continue;
if ( FD_ISSET(fd, &rset) ) {
char buf[1024] = {};
int r = read(fd, buf, 1024);
if ( r <= 0 ) {
close(fd);
clients[i] = -1;
FD_CLR(fd, &allset);
} else {
write(fd, buf, r);
}
if ( --nready <= 0 )
break;
}
}
}
}