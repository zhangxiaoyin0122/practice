#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/wait.h>

int main(){
    int fd[2];
    if (pipe(fd) < 0)
        perror("pipe"),exit(0);

    pid_t ps_fd = fork();
    if(ps_fd == 0){
        close(fd[0]);
        dup2(fd[1],1);
        execlp("ps","ps","-ef",NULL);
        exit(0);
    }
    pid_t grep_fd = fork();
    if(grep_fd == 0){
        close(fd[1]);
        dup2(fd[0],0);
        execlp("grep","grep","ssh",NULL);
        exit(0);
    }
    close(fd[0]);
    close(fd[1]);
    return 0;
}


#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/stat.h>

int main ()
{
    printf("printf");
    fprintf(stdout, "fprintf");
    fwrite("fwrite", 1, 6, stdout);
    write(1, "write", 5);

    sleep(3);
    close(1);
    umask(0);
    char *filename = "./test.txt";
    int fd = open(filename, O_RDWR | O_CREAT, 664);
    if (fd < 0) {
        perror("open file error");
        return -1;
    }
    printf("fd:%d\n", fd);

    //stdout->_fileno = fd;

    //int fprintf(FILE *stream, const char *format, ...);
    printf("leihoua~~laotie~~\n");
    fprintf(stdout, "nihaoa~~%s\n", "laotie~");
    fflush(stdout);

    close(fd);
    return 0;
}

//翻转链表
class Solution {
public:
    ListNode* ReverseList(ListNode* pHead) {
        ListNode* prev = nullptr;
        ListNode* cur = pHead;
        while(cur != nullptr){
            ListNode* next = cur->next;
            cur->next = prev;
            prev = cur;
            cur = next;
        }
        return prev;
    }
};